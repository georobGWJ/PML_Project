barplot()
?barplot()
library(ggplot2)
library(dplyr)
install.packages("ggplot2")
install.packages("ggmap", "dplyr", "rgdal")
install.packages("ggmap", "rgdal")
install.packages("ggmap")
install.packages("knitr")
install.packages("ggmap")
install.packages("spatial")
install.packages("sp")
install.packages("geos")
install.packages("rgdal")
install.packages("rgeos", "maptools", "dplyr", "tidyr", "tmap")
sessionInfo()
14.0/15
.93333*25 + 40
.12*..5
.12*.5
base = c(140,138,150,148,135)
week2 = c(132,135,151,146,130)
t.test(base, week2, paired = TRUE)
?t.test
t.test(week2, base, paired = TRUE)
1100 + c(-1, 1) * qt(0.975, 8) * 30/sqrt(9)
ttest <- c(1,1,1,0)
t.test(ttest)
t.test(ttest, alternative = one.sided)
t.test(ttest, alternative = "one.sided")
t.test(ttest)
t.test(ttest, mu = 0.5)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lm(w~x)
mean(w)
mean(x)
test <- function(mu) {
2*(0.18 - mu)^2 +
1*(-1.54 - mu)^2 +
3*(0.42 - mu)^2 +
1*(0.95 - mu)^2 }
test(0.0025)
test(1.077)
test(0.3)
test(0.1471)
x2 <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y2 <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
lm(x2~y2)
lm(x2~y2, offset = -0.59915)
bup <- c(6,4,2)
bup/2
x2m <- x2 / sd(x2)
y2m <- y2 / sd(y2)
lm(x2m~y2m)
rm(x2m, y2m)
data("mtcars")
lm(mtcars$wt~mtcars$mpg)
plot(mtcars$wt, mtcars$mpg)
lm(mtcars$mpg~mtcars$wt)
summary(x2)
x2
q2 <- function(x = x2, y = y2) {
top <- c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
bot <- c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
for (i in 1:10) {
top[i] = (x[i]-mean(x))*(y[i]-mean(y))
bot = (x[i]-mean(x))^2
}
(sum(top)/sum(bot))
}
q2()
.1409*90
x3 <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x3 <- x3/mean(x3)
x3
mean(x3)
sd(x3)
xt <- x3 / sd(x3)
mean(x3)
sd(x3)
sd(xt)
x3 <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x3 <- x3 - mean(x3)
x3
mean(x3)
xt <- x3/sd(x3)
mean(xt)
sd(xt)
xt
lm(x2~y2)
?lm
plot(x2,y2)
cov(x2, y2)
mean(y2)
y2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x - 1)
lm(y ~ x)
summary(lm(y~x))
install.packages("UsingR")
example("anscombe")
library(MASS)
?shuttle
sdata <- shuttle
View(sdata)
summary(shuttle)
fit <- glm(sdata$use ~ sdata$wind)
fit <- glm(sdata$use ~ sdata$wind, family = binomial)
summary(fit)
plot(sdata$wind, fit$fitted.values)
plot(sdata$use, sdata$wind)
plot(sdata$use ~ sdata$wind)
.58/(1-.58)
fit2 <- glm(sdata$use ~ sdata$wind + sdata$magn, family = binomial)
summary(fit2)
plot(sdata$wind, fit2$fitted.values)
fit3 <- glm(1 - sdata$use ~ sdata$wind, family = binomial)
bdata <- InsectSprays
View(bdata)
fit4 <- glm(bdata$count ~ bdata$spray, family = "poisson")
summary(fit4)
2.67/0.0559
2.67/(2.67+0.0559)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
summary(fit)
predict(fit, type="response")
exp(coef(fit))
fit2
exp(coef(fit2))
exp(coef(fit4))
cars <- cars
d <- mtcars
rm(cars)
?mtcars
plot(d$mpg ~ d$wt, color=d$am)
plot(d$mpg ~ d$wt, col=d$am)
plot(d$mpg ~ d$wt)
library(ggplot2)
gplot(d$mpg ~ d$wt, col=d$am)
qplot(d$mpg ~ d$wt, col=d$am)
qplot(d$wt, d$mpg, color=d$am)
View(d)
lm(d$mpg ~ .)
lm(mpg ~ ., data = d)
testfit <- lm(mpg ~ ., data = d)
summary(testfit)
tfit2 <- glm(d$mpg ~ d$., family = "gaussian")
tfit2 <- glm(d$mpg ~ ., family = "gaussian")
tfit2 <- glm(mpg ~ ., data = d, family = "gaussian")
summary(tfit2)
subset(d, am = 1)
auto <- subset(d, am = 1)
auto <- subset(d, am = 0)
auto <- subset(d, am == 0)
manu <- subset(d, am == 1)
summary(auto)
summary(auto$mpg)
summary(manu$mpg)
afit <- lm(mpg ~ wt, data = auto)
mfit <- lm(mpg ~ wt, data = manu)
plot(d$mpg ~ d$wt)
abline(afit)
abline(mfit)
lm(mpg ~ wt, data = d)
summary(lm(mpg ~ wt, data = d))
summary(lm(mpg ~ wt + cyl + disp + hp, data = d))
summary(lm(mpg ~ wt + cyl + factor(am), data = d))
install.packages("caret")
library(caret, ggplot2)
install.packages("pbkrtest")
library(caret, ggplot2)
data("iris")
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
mFit <- train(Species ~., method="rpart", data=training)
install.packages("Rpart")
install.packages("rpart")
install.packages("rpart")
mFit <- train(Species ~., method="rpart", data=training)
library(caret, ggplot2)
data("iris")
mFit <- train(Species ~., method="rpart", data=training)
library(rpart)
mFit <- train(Species ~., method="rpart", data=training)
install.packages("e1071")
library(rpart)
mFit <- train(Species ~., method="rpart", data=training)
print(mFit$finalModel)
plot(mFit$finalModel, uniform=TRUE, main="Classification Tree")
text(mFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
install.packages("rattle")
library(rattle)
library(caret)
mfit2 <- train(Species ~ ., data=training, method="rf", prox=TRUE)
mfit2 <- train(Species ~ ., data=training, method="rf", prox=TRUE)
mfit2
plot(mfit2$finalModel, k=3)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
sego <- segmentationOriginal
library(caret)
inTrain <- createDataPartition(y=sego$Case, p=0.7, list=FALSE)
training <- sego[inTrain,]
testing <- sego[-inTrain,]
mfit <- train(Case ~ ., method = "rpart", data=sego)
mfit
plot(mfit)
plot(mfit$finalModel)
text(mFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
View(sego)
plot(mFit$finalModel, uniform=TRUE, main="Classification Tree")
text(mFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
mfit
summary(mfit)
plot(mfit$finalModel, uniform=TRUE, main="Classification Tree")
text(mfit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
rm(mFit, mfit2)
install.packages("pgmm")
data(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
ofit <- olive(Area ~ ., method = "rpart", data=olive)
ofit <- train(Area ~ ., method = "rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
ofit <- train(Area ~ ., method = "rpart", data=newdata)
names(newdata)
str(newdata)
ofit <- train(Area ~ ., method = "rpart", data=olive)
predict(ofit, newdata = newdata)
setwd("~/Desktop/Coursera GLM Week4/")
dir()
library(caret)
library(AppliedPredictiveModeling)
install.packages("ElemStatLearn")
library(ElemStatLearn)
rm(inTrain, iris, testing, training, mFit)
data(vowel.train)
data(vowel.test)
View(vowel.test)
View(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.test)
str(vowel.train)
set.seed(33833)
modRF <- train(y ~., method="rf", data=vowel.train)
set.seed(33833)
modRF <- train(y ~., method="rf", data=vowel.train)
modGBM <- train(y ~., method="gbm", data=vowel.train)
predRF <- predict(modRF, newdata = vowel.test)
predGBM <- predict(modGBM, newdata = vowel.test)
summary(predRF)
predRF
data("concrete")
View(concrete)
rm(concrete, mixtures, vowel.test, vowel.train)
rm(modGBM, modRF, predGBM, predRF)
getwd()
setwd("~/Desktop/Coursera GLM Week4/GML_project/")
dir()
test <- read.csv("pml-testing.csv")
train <- read.csv("pml-training.csv")
View(test)
View(train)
names(test)
View(test)
summary(train$classe)
test$classe <- as.factor(test$classe)
train$classe <- as.factor(train$classe)
setwd("~/Desktop/Coursera GLM Week4/GML_project/PML_Project/")
library(caret)
mFit <- train(class ~ ., data=train, method="glm")
mFit <- train(classe ~ ., data=train, method="glm")
mFit <- train(classe ~ ., data=train, method="lda")
mFit <- train(classe ~ ., data=train, method="rf")
summary(train)
train$kurtosis_roll_belt[1]
train[1]$kurtosis_roll_belt
train[1]$yaw_belt
nullToNA <- function(x) {
x[sapply(x, is.null)] <- NA
return(x)
}
nullToNA(train)
View(train)
str(train)
bup <- read.csv("pml-training.csv", na.strings = c("NA",""))
View(bup)
rm(bup)
test <- read.csv("pml-testing.csv", na.strings = c("NA",""))
train <- read.csv("pml-training.csv", na.strings = c("NA",""))
mFit <- train(classe ~ ., data=train, method="glm")
summary(train)
summary(train$classe)
tpye(train$classe)
type(train$classe)
class(train$classe)
mFit <- train(classe ~ ., data=train, method="rf")
getwd()
